{{- with or (get .Values.policy "marvin-m-113-run-as-non-root") (dict "_" "_") }}
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: {{ default "marvin-m-113-run-as-non-root" .nameOverride }}
  labels:
    {{- include "vap.labels" $ | nindent 4 }}
spec:
  failurePolicy: {{ default $.Values.defaultFailurePolicy .failurePolicy }}
  matchConstraints:
    resourceRules:
    - apiGroups:
      - ''
      apiVersions:
      - v1
      resources:
      - pods
      operations:
      - CREATE
      - UPDATE
    - apiGroups:
      - apps
      apiVersions:
      - v1
      resources:
      - deployments
      - daemonsets
      - statefulsets
      - replicasets
      operations:
      - CREATE
      - UPDATE
    - apiGroups:
      - batch
      apiVersions:
      - v1
      resources:
      - cronjobs
      - jobs
      operations:
      - CREATE
      - UPDATE
  paramKind:
   apiVersion: v1
   kind: VAPConfig
  variables:
  - name: podMeta
    expression: |-
      has(object.spec.containers) ? object.metadata :
        has(object.spec.template) ? object.spec.template.metadata :
        has(object.spec.jobTemplate.spec.template.metadata) ?  object.spec.jobTemplate.spec.template.metadata :
        {}
  - name: podSpec
    expression: |-
      has(object.spec.containers) ? object.spec :
        has(object.spec.template) ? object.spec.template.spec :
        has(object.spec.jobTemplate.spec.template.spec) ?  object.spec.jobTemplate.spec.template.spec :
        {}
  - name: podContainers
    expression: |-
      object.spec.?containers.orValue([]) + object.spec.?initContainers.orValue([]) + object.spec.?ephemeralContainers.orValue([])
  - name: workloadContainers
    expression: |-
      object.spec.?template.spec.containers.orValue([]) + object.spec.?template.spec.initContainers.orValue([])
  - name: cronjobContainers
    expression: |-
      object.spec.?jobTemplate.spec.template.spec.containers.orValue([]) + object.spec.?jobTemplate.spec.template.spec.containers.orValue([])
  - name: allContainers
    expression: |-
      variables.podContainers + variables.workloadContainers + variables.cronjobContainers
  - name: podRunAsNonRoot
    expression: |-
      variables.podSpec.?securityContext.?runAsNonRoot.orValue(false)
  - name: podRunAsRoot
    expression: |-
      variables.podSpec.?securityContext.?runAsNonRoot.orValue(true) == false
  - name: podRunAsNonZeroUser
    expression: |-
      variables.podSpec.?securityContext.?runAsUser.orValue(0) != 0
  - name: explicitlyBadContainers
    expression: |-
      variables.allContainers.filter(c,
          c.?securityContext.?runAsNonRoot.orValue(null) == false
      )
  - name: implicitlyBadContainers
    expression: |-
      variables.allContainers.filter(c,
          (!variables.podRunAsNonRoot && c.?securityContext.?runAsNonRoot.orValue(null) == null) &&
          (!variables.podRunAsNonZeroUser && c.?securityContext.?runAsUser.orValue(0) == 0)
      )

  validations:
  - expression: |-
      !variables.podRunAsRoot && variables.explicitlyBadContainers.size() == 0 && variables.implicitlyBadContainers.size() == 0
    message: 'Container could be running as root user'
    messageExpression: ''
    reason: Invalid

{{- end }}
