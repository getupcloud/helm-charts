{{- if empty .Values.ecr.region}}
{{ fail "Missing required value: ecr.region" }}
{{- end }}
{{- if eq (.Values.awsAccountId | toString) "000000000000" }}
{{ fail "Missing required value: awsAccountId" }}
{{- end }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "ecr-credentials-sync.fullname" . }}
  labels:
    {{- include "ecr-credentials-sync.labels" . | nindent 4 }}
spec:
  concurrencyPolicy: Allow
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - command:
            - /bin/bash
            - -ec
            - |-
              SECRET_NAMESPACES=( $(</run/secrets/kubernetes.io/serviceaccount/namespace) )
              if [ -n "$NAMESPACE_LABEL_SELECTOR" ]; then
                SECRET_NAMESPACES=( $( kubectl get namespaces -l "$NAMESPACE_LABEL_SELECTOR" -o name | cut -f2 -d/) )

                if [ ${#SECRET_NAMESPACES[*]} -eq 0 ]; then
                  echo "No namespaces found with labels [$NAMESPACE_LABEL_SELECTOR]"
                  exit 0
                fi
              fi

              kubectl create secret docker-registry $SECRET_NAME \
                --docker-server="$ECR_REGISTRY" \
                --docker-username=AWS \
                --docker-password="$(</token/ecr-token)" \
                --dry-run=client --output json --save-config \
              | kubectl patch --local -f - -o json -p '{
                  "metadata": {
                    "annotations": {{ toJson .Values.secret.annotations }},
                    "labels": {{ toJson .Values.secret.labels }}
                  }
                }' \
              > /token/secret.json

              echo Secret content:
              cat /token/secret.json | jq -M '.data[".dockerconfigjson"]="[REDACTED]"|.metadata.annotations["kubectl.kubernetes.io/last-applied-configuration"]="[REDACTED]"'
              echo
              for namespace in "${SECRET_NAMESPACES[@]}"; do
                echo Creating secret: $namespace/$SECRET_NAME
                kubectl apply -f /token/secret.json --namespace ${namespace} || true
              done

              rm -f /token/secret.yaml
            env:
            - name: SECRET_NAME
              value: {{ .Values.secret.name }}
            - name: NAMESPACE_LABEL_SELECTOR
              {{- $labels := list }}
              {{- range $k, $v := .Values.secret.namespaceLabelSelector }}
                {{- if eq $v "" }}
                {{- $labels = append $labels (print $k) }}
                {{- else }}
                {{- $labels = append $labels (print $k "=" $v) }}
                {{- end }}
              {{- end }}
              value: "{{ join "," $labels }}"
            - name: ECR_REGISTRY
              value: "{{ .Values.awsAccountId | toString }}.{{ get .Values.ecr.registrySuffix .Values.ecr.region }}"
            {{- if .Values.kubectl.image.tag }}
            image: {{ .Values.kubectl.image.name }}:{{ .Values.kubectl.image.tag }}
            {{- else }}
            image: {{ .Values.kubectl.image.name }}:{{ .Capabilities.KubeVersion.Major | regexFind "[0-9]+" }}.{{ .Capabilities.KubeVersion.Minor | regexFind "[0-9]+" }}
            {{- end }}
            imagePullPolicy: IfNotPresent
            name: create-secret
            resources:
              limits:
                cpu: 50m
                memory: 256Mi
              requests:
                cpu: 50m
                memory: 64Mi
            volumeMounts:
            - mountPath: /token
              name: token
          initContainers:
          - command:
            - /bin/sh
            - -xce
            - aws ecr get-login-password --region $AWS_REGION > /token/ecr-token
            env:
            - name: AWS_REGION
              value: {{ .Values.ecr.region }}
            {{- if .Values.aws_credentials.aws_access_key_id }}
            - name: AWS_ACCESS_KEY_ID
              value: {{ .Values.aws_credentials.aws_access_key_id }}
            {{- end }}
            {{- if .Values.aws_credentials.aws_secret_access_key }}
            - name: AWS_SECRET_ACCESS_KEY
              value: {{ .Values.aws_credentials.aws_secret_access_key }}
            {{- end }}
            image: {{ .Values.awscli.image.name }}:{{ .Values.awscli.image.tag }}
            imagePullPolicy: IfNotPresent
            name: get-token
            resources:
              limits:
                cpu: 50m
                memory: 64Mi
              requests:
                cpu: 50m
                memory: 64Mi
            volumeMounts:
            - mountPath: /token
              name: token
          {{- with .Values.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          restartPolicy: Never
          serviceAccountName: {{ include "ecr-credentials-sync.serviceAccountName" . }}
          terminationGracePeriodSeconds: 30
          volumes:
          - emptyDir:
              medium: Memory
            name: token
  schedule: {{ .Values.schedule }}
  successfulJobsHistoryLimit: 1

